agents:
  queue: central
  slurm_mem: 8G
  modules: julia/1.10.0

env:
  OPENBLAS_NUM_THREADS: 1
  JULIA_MAX_NUM_PRECOMPILE_FILES: 100
  JULIA_CPU_TARGET: 'broadwell;skylake;icelake;cascadelake;epyc'
  SLURM_KILL_BAD_EXIT: 1
  JULIA_NVTX_CALLBACKS: gc

steps:
  - label: "init cpu env"
    key: "init_cpu_env"
    command:
      - "echo $$JULIA_DEPOT_PATH"
      # - echo "--- Configure MPI"
      # - julia -e 'using Pkg; Pkg.add("MPIPreferences"); using MPIPreferences; use_system_binary()'

      - echo "--- Instantiate project"
      - "JULIA_DEBUG=all julia --project -e 'using Pkg; Pkg.instantiate(;verbose=true); Pkg.precompile(;strict=true)'"
      # force the initialization of the CUDA runtime as it is lazily loaded by default
      - "julia --project -e 'using CUDA; CUDA.precompile_runtime()'"

      - echo "--- Instantiate test"
      - "julia --project=test -e 'using Pkg; Pkg.develop(path=\".\"); Pkg.instantiate(;verbose=true); Pkg.precompile(;strict=true)'"

      - echo "--- Instantiate perf"
      - "julia --project=perf -e 'using Pkg; Pkg.instantiate(;verbose=true); Pkg.precompile(;strict=true)'"

      - echo "--- Package status"
      - "julia --project -e 'using Pkg; Pkg.status()'"

    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1
    env:
      JULIA_NUM_PRECOMPILE_TASKS: 8
      JULIA_MAX_NUM_PRECOMPILE_FILES: 50

  # - label: "init gpu env"
  #   key: "init_gpu_env"
  #   command:
  #     - echo "--- Configure MPI"
  #     - julia -e 'using Pkg; Pkg.add("MPIPreferences"); using MPIPreferences; use_system_binary()'

  #     - echo "--- Instantiate project"
  #     - "julia --project -e 'using Pkg; Pkg.instantiate(;verbose=true); Pkg.precompile(;strict=true)'"

  #     - echo "--- Instantiate test"
  #     - "julia --project=test -e 'using Pkg; Pkg.develop(path=\".\"); Pkg.instantiate(;verbose=true); Pkg.precompile()'"

  #     - echo "--- Initialize CUDA runtime"
  #     - "julia --project -e 'using CUDA; CUDA.precompile_runtime(); CUDA.versioninfo()'"

  #     - echo "--- Package status"
  #     - "julia --project -e 'using Pkg; Pkg.status()'"
  #   agents:
  #     config: gpu
  #     queue: central
  #     slurm_ntasks: 1
  #     slurm_gres: "gpu:1"

  - wait

  - group: "Unit tests"
    steps:
      - label: "CPU tests"
        command:
          - "julia --project=test --check-bounds=yes test/runtests.jl"
        artifact_paths: "output/*"
        agents:
          config: cpu
          queue: central
          slurm_ntasks: 1

  # - label: "GPU tests"
  #   command:
  #     - "julia --project=test --check-bounds=yes test/runtests.jl CuArray"
  #   artifact_paths: "output/*"
  #   agents:
  #     config: gpu
  #     queue: central
  #     slurm_ntasks: 1
  #     slurm_gres: "gpu:1"

  - group: "Performance"
    steps:

    - label: "Flame graph (1D diffusion)"
      command:
        - "julia --project=perf perf/flame.jl --job_id diffusion_1D"
      artifact_paths: "diffusion_1D/*"
      agents:
        config: cpu
        queue: central
        slurm_ntasks: 1

    - label: "Jet graph (ode fun)"
      command:
        - "julia --project=perf perf/jet.jl --problem ode_fun"
      agents:
        config: cpu
        queue: central
        slurm_ntasks: 1

    - label: "Jet (forward euler)"
      command:
        - "julia --project=perf perf/jet.jl --problem fe"
      agents:
        config: cpu
        queue: central
        slurm_ntasks: 1

    - label: "Benchmark"
      command:
        - "julia --project=perf perf/benchmark.jl"
      agents:
        config: cpu
        queue: central
        slurm_ntasks: 1
